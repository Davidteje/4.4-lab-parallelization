database-wikipedia-database-from-wikipedia-the-free-encyclopedia-jump-to-navigation-jump-to-search-organized-collection-of-data-in-computing-this-article-is-about-the-computing-concept-for-instances-of-the-general-concept-see-lists-of-databases-an-sql-select-statement-and-its-result-in-computing-a-database-is-an-organized-collection-of-data-stored-and-accessed-electronically-small-databases-can-be-stored-on-a-file-system-while-large-databases-are-hosted-on-computer-clusters-or-cloud-storage-the-design-of-databases-spans-formal-techniques-and-practical-considerations-including-data-modeling-efficient-data-representation-and-storage-query-languages-security-and-privacy-of-sensitive-data-and-distributed-computing-issues-including-supporting-concurrent-access-and-fault-tolerance-a-database-management-system-dbms-is-the-software-that-interacts-with-end-users-applications-and-the-database-itself-to-capture-and-analyze-the-data-the-dbms-software-additionally-encompasses-the-core-facilities-provided-to-administer-the-database-the-sum-total-of-the-database-the-dbms-and-the-associated-applications-can-be-referred-to-as-a-database-system-often-the-term-database-is-also-used-loosely-to-refer-to-any-of-the-dbms-the-database-system-or-an-application-associated-with-the-database-computer-scientists-may-classify-database-management-systems-according-to-the-database-models-that-they-support-relational-databases-became-dominant-in-the-1980s-these-model-data-as-rows-and-columns-in-a-series-of-tables-and-the-vast-majority-use-sql-for-writing-and-querying-data-in-the-2000s-non-relational-databases-became-popular-collectively-referred-to-as-nosql-because-they-use-different-query-languages-contents-1-terminology-and-overview-2-history-2-1-1960s-navigational-dbms-2-2-1970s-relational-dbms-2-3-integrated-approach-2-4-late-1970s-sql-dbms-2-5-1980s-on-the-desktop-2-6-1990s-object-oriented-2-7-2000s-nosql-and-newsql-3-use-cases-4-classification-5-database-management-system-6-application-6-1-application-program-interface-7-database-languages-8-storage-8-1-materialized-views-8-2-replication-8-3-virtualization-9-security-10-transactions-and-concurrency-11-migration-12-building-maintaining-and-tuning-13-backup-and-restore-14-static-analysis-15-miscellaneous-features-16-design-and-modeling-16-1-models-16-2-external-conceptual-and-internal-views-17-research-18-see-also-19-notes-20-references-21-sources-22-further-reading-23-external-links-terminology-and-overview-formally-a-database-refers-to-a-set-of-related-data-and-the-way-it-is-organized-access-to-this-data-is-usually-provided-by-a-database-management-system-dbms-consisting-of-an-integrated-set-of-computer-software-that-allows-users-to-interact-with-one-or-more-databases-and-provides-access-to-all-of-the-data-contained-in-the-database-although-restrictions-may-exist-that-limit-access-to-particular-data-the-dbms-provides-various-functions-that-allow-entry-storage-and-retrieval-of-large-quantities-of-information-and-provides-ways-to-manage-how-that-information-is-organized-because-of-the-close-relationship-between-them-the-term-database-is-often-used-casually-to-refer-to-both-a-database-and-the-dbms-used-to-manipulate-it-outside-the-world-of-professional-information-technology-the-term-database-is-often-used-to-refer-to-any-collection-of-related-data-such-as-a-spreadsheet-or-a-card-index-as-size-and-usage-requirements-typically-necessitate-use-of-a-database-management-system-1-existing-dbmss-provide-various-functions-that-allow-management-of-a-database-and-its-data-which-can-be-classified-into-four-main-functional-groups-data-definition-creation-modification-and-removal-of-definitions-that-define-the-organization-of-the-data-update-insertion-modification-and-deletion-of-the-actual-data-2-retrieval-providing-information-in-a-form-directly-usable-or-for-further-processing-by-other-applications-the-retrieved-data-may-be-made-available-in-a-form-basically-the-same-as-it-is-stored-in-the-database-or-in-a-new-form-obtained-by-altering-or-combining-existing-data-from-the-database-3-administration-registering-and-monitoring-users-enforcing-data-security-monitoring-performance-maintaining-data-integrity-dealing-with-concurrency-control-and-recovering-information-that-has-been-corrupted-by-some-event-such-as-an-unexpected-system-failure-4-both-a-database-and-its-dbms-conform-to-the-principles-of-a-particular-database-model-5-database-system-refers-collectively-to-the-database-model-database-management-system-and-database-6-physically-database-servers-are-dedicated-computers-that-hold-the-actual-databases-and-run-only-the-dbms-and-related-software-database-servers-are-usually-multiprocessor-computers-with-generous-memory-and-raid-disk-arrays-used-for-stable-storage-hardware-database-accelerators-connected-to-one-or-more-servers-via-a-high-speed-channel-are-also-used-in-large-volume-transaction-processing-environments-dbmss-are-found-at-the-heart-of-most-database-applications-dbmss-may-be-built-around-a-custom-multitasking-kernel-with-built-in-networking-support-but-modern-dbmss-typically-rely-on-a-standard-operating-system-to-provide-these-functions-citation-needed-since-dbmss-comprise-a-significant-market-computer-and-storage-vendors-often-take-into-account-dbms-requirements-in-their-own-development-plans-7-databases-and-dbmss-can-be-categorized-according-to-the-database-model-s-that-they-support-such-as-relational-or-xml-the-type-s-of-computer-they-run-on-from-a-server-cluster-to-a-mobile-phone-the-query-language-s-used-to-access-the-database-such-as-sql-or-xquery-and-their-internal-engineering-which-affects-performance-scalability-resilience-and-security-history-the-sizes-capabilities-and-performance-of-databases-and-their-respective-dbmss-have-grown-in-orders-of-magnitude-these-performance-increases-were-enabled-by-the-technology-progress-in-the-areas-of-processors-computer-memory-computer-storage-and-computer-networks-the-concept-of-a-database-was-made-possible-by-the-emergence-of-direct-access-storage-media-such-as-magnetic-disks-which-became-widely-available-in-the-mid-1960s-earlier-systems-relied-on-sequential-storage-of-data-on-magnetic-tape-the-subsequent-development-of-database-technology-can-be-divided-into-three-eras-based-on-data-model-or-structure-navigational-8-sql-relational-and-post-relational-the-two-main-early-navigational-data-models-were-the-hierarchical-model-and-the-codasyl-model-network-model-these-were-characterized-by-the-use-of-pointers-often-physical-disk-addresses-to-follow-relationships-from-one-record-to-another-the-relational-model-first-proposed-in-1970-by-edgar-f-codd-departed-from-this-tradition-by-insisting-that-applications-should-search-for-data-by-content-rather-than-by-following-links-the-relational-model-employs-sets-of-ledger-style-tables-each-used-for-a-different-type-of-entity-only-in-the-mid-1980s-did-computing-hardware-become-powerful-enough-to-allow-the-wide-deployment-of-relational-systems-dbmss-plus-applications-by-the-early-1990s-however-relational-systems-dominated-in-all-large-scale-data-processing-applications-and-as-of-2018-update-they-remain-dominant-ibm-db2-oracle-mysql-and-microsoft-sql-server-are-the-most-searched-dbms-9-the-dominant-database-language-standardized-sql-for-the-relational-model-has-influenced-database-languages-for-other-data-models-citation-needed-object-databases-were-developed-in-the-1980s-to-overcome-the-inconvenience-of-object-relational-impedance-mismatch-which-led-to-the-coining-of-the-term-post-relational-and-also-the-development-of-hybrid-object-relational-databases-the-next-generation-of-post-relational-databases-in-the-late-2000s-became-known-as-nosql-databases-introducing-fast-key-value-stores-and-document-oriented-databases-a-competing-next-generation-known-as-newsql-databases-attempted-new-implementations-that-retained-the-relational-sql-model-while-aiming-to-match-the-high-performance-of-nosql-compared-to-commercially-available-relational-dbmss-1960s-navigational-dbms-further-information-navigational-database-basic-structure-of-navigational-codasyl-database-model-the-introduction-of-the-term-database-coincided-with-the-availability-of-direct-access-storage-disks-and-drums-from-the-mid-1960s-onwards-the-term-represented-a-contrast-with-the-tape-based-systems-of-the-past-allowing-shared-interactive-use-rather-than-daily-batch-processing-the-oxford-english-dictionary-cites-a-1962-report-by-the-system-development-corporation-of-california-as-the-first-to-use-the-term-data-base-in-a-specific-technical-sense-10-as-computers-grew-in-speed-and-capability-a-number-of-general-purpose-database-systems-emerged-by-the-mid-1960s-a-number-of-such-systems-had-come-into-commercial-use-interest-in-a-standard-began-to-grow-and-charles-bachman-author-of-one-such-product-the-integrated-data-store-ids-founded-the-database-task-group-within-codasyl-the-group-responsible-for-the-creation-and-standardization-of-cobol-in-1971-the-database-task-group-delivered-their-standard-which-generally-became-known-as-the-codasyl-approach-and-soon-a-number-of-commercial-products-based-on-this-approach-entered-the-market-the-codasyl-approach-offered-applications-the-ability-to-navigate-around-a-linked-data-set-which-was-formed-into-a-large-network-applications-could-find-records-by-one-of-three-methods-use-of-a-primary-key-known-as-a-calc-key-typically-implemented-by-hashing-navigating-relationships-called-sets-from-one-record-to-another-scanning-all-the-records-in-a-sequential-order-later-systems-added-b-trees-to-provide-alternate-access-paths-many-codasyl-databases-also-added-a-declarative-query-language-for-end-users-as-distinct-from-the-navigational-api-however-codasyl-databases-were-complex-and-required-significant-training-and-effort-to-produce-useful-applications-ibm-also-had-its-own-dbms-in-1966-known-as-information-management-system-ims-ims-was-a-development-of-software-written-for-the-apollo-program-on-the-system-360-ims-was-generally-similar-in-concept-to-codasyl-but-used-a-strict-hierarchy-for-its-model-of-data-navigation-instead-of-codasyl-s-network-model-both-concepts-later-became-known-as-navigational-databases-due-to-the-way-data-was-accessed-the-term-was-popularized-by-bachman-s-1973-turing-award-presentation-the-programmer-as-navigator-ims-is-classified-by-ibm-as-a-hierarchical-database-idms-and-cincom-systems-total-databases-are-classified-as-network-databases-ims-remains-in-use-as-of-2014-update-11-1970s-relational-dbms-edgar-f-codd-worked-at-ibm-in-san-jose-california-in-one-of-their-offshoot-offices-that-were-primarily-involved-in-the-development-of-hard-disk-systems-he-was-unhappy-with-the-navigational-model-of-the-codasyl-approach-notably-the-lack-of-a-search-facility-in-1970-he-wrote-a-number-of-papers-that-outlined-a-new-approach-to-database-construction-that-eventually-culminated-in-the-groundbreaking-a-relational-model-of-data-for-large-shared-data-banks-12-in-this-paper-he-described-a-new-system-for-storing-and-working-with-large-databases-instead-of-records-being-stored-in-some-sort-of-linked-list-of-free-form-records-as-in-codasyl-codd-s-idea-was-to-organize-the-data-as-a-number-of-tables-each-table-being-used-for-a-different-type-of-entity-each-table-would-contain-a-fixed-number-of-columns-containing-the-attributes-of-the-entity-one-or-more-columns-of-each-table-were-designated-as-a-primary-key-by-which-the-rows-of-the-table-could-be-uniquely-identified-cross-references-between-tables-always-used-these-primary-keys-rather-than-disk-addresses-and-queries-would-join-tables-based-on-these-key-relationships-using-a-set-of-operations-based-on-the-mathematical-system-of-relational-calculus-from-which-the-model-takes-its-name-splitting-the-data-into-a-set-of-normalized-tables-or-relations-aimed-to-ensure-that-each-fact-was-only-stored-once-thus-simplifying-update-operations-virtual-tables-called-views-could-present-the-data-in-different-ways-for-different-users-but-views-could-not-be-directly-updated-codd-used-mathematical-terms-to-define-the-model-relations-tuples-and-domains-rather-than-tables-rows-and-columns-the-terminology-that-is-now-familiar-came-from-early-implementations-codd-would-later-criticize-the-tendency-for-practical-implementations-to-depart-from-the-mathematical-foundations-on-which-the-model-was-based-in-the-relational-model-records-are-linked-using-virtual-keys-not-stored-in-the-database-but-defined-as-needed-between-the-data-contained-in-the-records-the-use-of-primary-keys-user-oriented-identifiers-to-represent-cross-table-relationships-rather-than-disk-addresses-had-two-primary-motivations-from-an-engineering-perspective-it-enabled-tables-to-be-relocated-and-resized-without-expensive-database-reorganization-but-codd-was-more-interested-in-the-difference-in-semantics-the-use-of-explicit-identifiers-made-it-easier-to-define-update-operations-with-clean-mathematical-definitions-and-it-also-enabled-query-operations-to-be-defined-in-terms-of-the-established-discipline-of-first-order-predicate-calculus-because-these-operations-have-clean-mathematical-properties-it-becomes-possible-to-rewrite-queries-in-provably-correct-ways-which-is-the-basis-of-query-optimization-there-is-no-loss-of-expressiveness-compared-with-the-hierarchic-or-network-models-though-the-connections-between-tables-are-no-longer-so-explicit-in-the-hierarchic-and-network-models-records-were-allowed-to-have-a-complex-internal-structure-for-example-the-salary-history-of-an-employee-might-be-represented-as-a-repeating-group-within-the-employee-record-in-the-relational-model-the-process-of-normalization-led-to-such-internal-structures-being-replaced-by-data-held-in-multiple-tables-connected-only-by-logical-keys-for-instance-a-common-use-of-a-database-system-is-to-track-information-about-users-their-name-login-information-various-addresses-and-phone-numbers-in-the-navigational-approach-all-of-this-data-would-be-placed-in-a-single-variable-length-record-in-the-relational-approach-the-data-would-be-normalized-into-a-user-table-an-address-table-and-a-phone-number-table-for-instance-records-would-be-created-in-these-optional-tables-only-if-the-address-or-phone-numbers-were-actually-provided-as-well-as-identifying-rows-records-using-logical-identifiers-rather-than-disk-addresses-codd-changed-the-way-in-which-applications-assembled-data-from-multiple-records-rather-than-requiring-applications-to-gather-data-one-record-at-a-time-by-navigating-the-links-they-would-use-a-declarative-query-language-that-expressed-what-data-was-required-rather-than-the-access-path-by-which-it-should-be-found-finding-an-efficient-access-path-to-the-data-became-the-responsibility-of-the-database-management-system-rather-than-the-application-programmer-this-process-called-query-optimization-depended-on-the-fact-that-queries-were-expressed-in-terms-of-mathematical-logic-codd-s-paper-was-picked-up-by-two-people-at-berkeley-eugene-wong-and-michael-stonebraker-they-started-a-project-known-as-ingres-using-funding-that-had-already-been-allocated-for-a-geographical-database-project-and-student-programmers-to-produce-code-beginning-in-1973-ingres-delivered-its-first-test-products-which-were-generally-ready-for-widespread-use-in-1979-ingres-was-similar-to-system-r-in-a-number-of-ways-including-the-use-of-a-language-for-data-access-known-as-quel-over-time-ingres-moved-to-the-emerging-sql-standard-ibm-itself-did-one-test-implementation-of-the-relational-model-prtv-and-a-production-one-business-system-12-both-now-discontinued-honeywell-wrote-mrds-for-multics-and-now-there-are-two-new-implementations-alphora-dataphor-and-rel-most-other-dbms-implementations-usually-called-relational-are-actually-sql-dbmss-in-1970-the-university-of-michigan-began-development-of-the-micro-information-management-system-13-based-on-d-l-childs-set-theoretic-data-model-14-15-16-micro-was-used-to-manage-very-large-data-sets-by-the-us-department-of-labor-the-u-s-environmental-protection-agency-and-researchers-from-the-university-of-alberta-the-university-of-michigan-and-wayne-state-university-it-ran-on-ibm-mainframe-computers-using-the-michigan-terminal-system-17-the-system-remained-in-production-until-1998-integrated-approach-main-article-database-machine-in-the-1970s-and-1980s-attempts-were-made-to-build-database-systems-with-integrated-hardware-and-software-the-underlying-philosophy-was-that-such-integration-would-provide-higher-performance-at-a-lower-cost-examples-were-ibm-system-38-the-early-offering-of-teradata-and-the-britton-lee-inc-database-machine-another-approach-to-hardware-support-for-database-management-was-icl-s-cafs-accelerator-a-hardware-disk-controller-with-programmable-search-capabilities-in-the-long-term-these-efforts-were-generally-unsuccessful-because-specialized-database-machines-could-not-keep-pace-with-the-rapid-development-and-progress-of-general-purpose-computers-thus-most-database-systems-nowadays-are-software-systems-running-on-general-purpose-hardware-using-general-purpose-computer-data-storage-however-this-idea-is-still-pursued-in-certain-applications-by-some-companies-like-netezza-and-oracle-exadata-late-1970s-sql-dbms-ibm-started-working-on-a-prototype-system-loosely-based-on-codd-s-concepts-as-system-r-in-the-early-1970s-the-first-version-was-ready-in-1974-5-and-work-then-started-on-multi-table-systems-in-which-the-data-could-be-split-so-that-all-of-the-data-for-a-record-some-of-which-is-optional-did-not-have-to-be-stored-in-a-single-large-chunk-subsequent-multi-user-versions-were-tested-by-customers-in-1978-and-1979-by-which-time-a-standardized-query-language-sql-citation-needed-had-been-added-codd-s-ideas-were-establishing-themselves-as-both-workable-and-superior-to-codasyl-pushing-ibm-to-develop-a-true-production-version-of-system-r-known-as-sql-ds-and-later-database-2-ibm-db2-larry-ellison-s-oracle-database-or-more-simply-oracle-started-from-a-different-chain-based-on-ibm-s-papers-on-system-r-though-oracle-v1-implementations-were-completed-in-1978-it-wasn-t-until-oracle-version-2-when-ellison-beat-ibm-to-market-in-1979-18-stonebraker-went-on-to-apply-the-lessons-from-ingres-to-develop-a-new-database-postgres-which-is-now-known-as-postgresql-postgresql-is-often-used-for-global-mission-critical-applications-the-org-and-info-domain-name-registries-use-it-as-their-primary-data-store-as-do-many-large-companies-and-financial-institutions-in-sweden-codd-s-paper-was-also-read-and-mimer-sql-was-developed-in-the-mid-1970s-at-uppsala-university-in-1984-this-project-was-consolidated-into-an-independent-enterprise-another-data-model-the-entity-relationship-model-emerged-in-1976-and-gained-popularity-for-database-design-as-it-emphasized-a-more-familiar-description-than-the-earlier-relational-model-later-on-entity-relationship-constructs-were-retrofitted-as-a-data-modeling-construct-for-the-relational-model-and-the-difference-between-the-two-has-become-irrelevant-citation-needed-1980s-on-the-desktop-the-1980s-ushered-in-the-age-of-desktop-computing-the-new-computers-empowered-their-users-with-spreadsheets-like-lotus-1-2-3-and-database-software-like-dbase-the-dbase-product-was-lightweight-and-easy-for-any-computer-user-to-understand-out-of-the-box-c-wayne-ratliff-the-creator-of-dbase-stated-dbase-was-different-from-programs-like-basic-c-fortran-and-cobol-in-that-a-lot-of-the-dirty-work-had-already-been-done-the-data-manipulation-is-done-by-dbase-instead-of-by-the-user-so-the-user-can-concentrate-on-what-he-is-doing-rather-than-having-to-mess-with-the-dirty-details-of-opening-reading-and-closing-files-and-managing-space-allocation-19-dbase-was-one-of-the-top-selling-software-titles-in-the-1980s-and-early-1990s-1990s-object-oriented-the-1990s-along-with-a-rise-in-object-oriented-programming-saw-a-growth-in-how-data-in-various-databases-were-handled-programmers-and-designers-began-to-treat-the-data-in-their-databases-as-objects-that-is-to-say-that-if-a-person-s-data-were-in-a-database-that-person-s-attributes-such-as-their-address-phone-number-and-age-were-now-considered-to-belong-to-that-person-instead-of-being-extraneous-data-this-allows-for-relations-between-data-to-be-related-to-objects-and-their-attributes-and-not-to-individual-fields-20-the-term-object-relational-impedance-mismatch-described-the-inconvenience-of-translating-between-programmed-objects-and-database-tables-object-databases-and-object-relational-databases-attempt-to-solve-this-problem-by-providing-an-object-oriented-language-sometimes-as-extensions-to-sql-that-programmers-can-use-as-alternative-to-purely-relational-sql-on-the-programming-side-libraries-known-as-object-relational-mappings-orms-attempt-to-solve-the-same-problem-2000s-nosql-and-newsql-main-articles-nosql-and-newsql-xml-databases-are-a-type-of-structured-document-oriented-database-that-allows-querying-based-on-xml-document-attributes-xml-databases-are-mostly-used-in-applications-where-the-data-is-conveniently-viewed-as-a-collection-of-documents-with-a-structure-that-can-vary-from-the-very-flexible-to-the-highly-rigid-examples-include-scientific-articles-patents-tax-filings-and-personnel-records-nosql-databases-are-often-very-fast-do-not-require-fixed-table-schemas-avoid-join-operations-by-storing-denormalized-data-and-are-designed-to-scale-horizontally-in-recent-years-there-has-been-a-strong-demand-for-massively-distributed-databases-with-high-partition-tolerance-but-according-to-the-cap-theorem-it-is-impossible-for-a-distributed-system-to-simultaneously-provide-consistency-availability-and-partition-tolerance-guarantees-a-distributed-system-can-satisfy-any-two-of-these-guarantees-at-the-same-time-but-not-all-three-for-that-reason-many-nosql-databases-are-using-what-is-called-eventual-consistency-to-provide-both-availability-and-partition-tolerance-guarantees-with-a-reduced-level-of-data-consistency-newsql-is-a-class-of-modern-relational-databases-that-aims-to-provide-the-same-scalable-performance-of-nosql-systems-for-online-transaction-processing-read-write-workloads-while-still-using-sql-and-maintaining-the-acid-guarantees-of-a-traditional-database-system-use-cases-this-section-does-not-cite-any-sources-please-help-improve-this-section-by-adding-citations-to-reliable-sources-unsourced-material-may-be-challenged-and-removed-march-2013-learn-how-and-when-to-remove-this-template-message-databases-are-used-to-support-internal-operations-of-organizations-and-to-underpin-online-interactions-with-customers-and-suppliers-see-enterprise-software-databases-are-used-to-hold-administrative-information-and-more-specialized-data-such-as-engineering-data-or-economic-models-examples-include-computerized-library-systems-flight-reservation-systems-computerized-parts-inventory-systems-and-many-content-management-systems-that-store-websites-as-collections-of-webpages-in-a-database-classification-one-way-to-classify-databases-involves-the-type-of-their-contents-for-example-bibliographic-document-text-statistical-or-multimedia-objects-another-way-is-by-their-application-area-for-example-accounting-music-compositions-movies-banking-manufacturing-or-insurance-a-third-way-is-by-some-technical-aspect-such-as-the-database-structure-or-interface-type-this-section-lists-a-few-of-the-adjectives-used-to-characterize-different-kinds-of-databases-an-in-memory-database-is-a-database-that-primarily-resides-in-main-memory-but-is-typically-backed-up-by-non-volatile-computer-data-storage-main-memory-databases-are-faster-than-disk-databases-and-so-are-often-used-where-response-time-is-critical-such-as-in-telecommunications-network-equipment-an-active-database-includes-an-event-driven-architecture-which-can-respond-to-conditions-both-inside-and-outside-the-database-possible-uses-include-security-monitoring-alerting-statistics-gathering-and-authorization-many-databases-provide-active-database-features-in-the-form-of-database-triggers-a-cloud-database-relies-on-cloud-technology-both-the-database-and-most-of-its-dbms-reside-remotely-in-the-cloud-while-its-applications-are-both-developed-by-programmers-and-later-maintained-and-used-by-end-users-through-a-web-browser-and-open-apis-data-warehouses-archive-data-from-operational-databases-and-often-from-external-sources-such-as-market-research-firms-the-warehouse-becomes-the-central-source-of-data-for-use-by-managers-and-other-end-users-who-may-not-have-access-to-operational-data-for-example-sales-data-might-be-aggregated-to-weekly-totals-and-converted-from-internal-product-codes-to-use-upcs-so-that-they-can-be-compared-with-acnielsen-data-some-basic-and-essential-components-of-data-warehousing-include-extracting-analyzing-and-mining-data-transforming-loading-and-managing-data-so-as-to-make-them-available-for-further-use-a-deductive-database-combines-logic-programming-with-a-relational-database-a-distributed-database-is-one-in-which-both-the-data-and-the-dbms-span-multiple-computers-a-document-oriented-database-is-designed-for-storing-retrieving-and-managing-document-oriented-or-semi-structured-information-document-oriented-databases-are-one-of-the-main-categories-of-nosql-databases-an-embedded-database-system-is-a-dbms-which-is-tightly-integrated-with-an-application-software-that-requires-access-to-stored-data-in-such-a-way-that-the-dbms-is-hidden-from-the-application-s-end-users-and-requires-little-or-no-ongoing-maintenance-21-end-user-databases-consist-of-data-developed-by-individual-end-users-examples-of-these-are-collections-of-documents-spreadsheets-presentations-multimedia-and-other-files-several-products-exist-to-support-such-databases-some-of-them-are-much-simpler-than-full-fledged-dbmss-with-more-elementary-dbms-functionality-a-federated-database-system-comprises-several-distinct-databases-each-with-its-own-dbms-it-is-handled-as-a-single-database-by-a-federated-database-management-system-fdbms-which-transparently-integrates-multiple-autonomous-dbmss-possibly-of-different-types-in-which-case-it-would-also-be-a-heterogeneous-database-system-and-provides-them-with-an-integrated-conceptual-view-sometimes-the-term-multi-database-is-used-as-a-synonym-for-federated-database-though-it-may-refer-to-a-less-integrated-e-g-without-an-fdbms-and-a-managed-integrated-schema-group-of-databases-that-cooperate-in-a-single-application-in-this-case-typically-middleware-is-used-for-distribution-which-typically-includes-an-atomic-commit-protocol-acp-e-g-the-two-phase-commit-protocol-to-allow-distributed-global-transactions-across-the-participating-databases-a-graph-database-is-a-kind-of-nosql-database-that-uses-graph-structures-with-nodes-edges-and-properties-to-represent-and-store-information-general-graph-databases-that-can-store-any-graph-are-distinct-from-specialized-graph-databases-such-as-triplestores-and-network-databases-an-array-dbms-is-a-kind-of-nosql-dbms-that-allows-modeling-storage-and-retrieval-of-usually-large-multi-dimensional-arrays-such-as-satellite-images-and-climate-simulation-output-in-a-hypertext-or-hypermedia-database-any-word-or-a-piece-of-text-representing-an-object-e-g-another-piece-of-text-an-article-a-picture-or-a-film-can-be-hyperlinked-to-that-object-hypertext-databases-are-particularly-useful-for-organizing-large-amounts-of-disparate-information-for-example-they-are-useful-for-organizing-online-encyclopedias-where-users-can-conveniently-jump-around-the-text-the-world-wide-web-is-thus-a-large-distributed-hypertext-database-a-knowledge-base-abbreviated-kb-kb-or-d-22-23-is-a-special-kind-of-database-for-knowledge-management-providing-the-means-for-the-computerized-collection-organization-and-retrieval-of-knowledge-also-a-collection-of-data-representing-problems-with-their-solutions-and-related-experiences-a-mobile-database-can-be-carried-on-or-synchronized-from-a-mobile-computing-device-operational-databases-store-detailed-data-about-the-operations-of-an-organization-they-typically-process-relatively-high-volumes-of-updates-using-transactions-examples-include-customer-databases-that-record-contact-credit-and-demographic-information-about-a-business-s-customers-personnel-databases-that-hold-information-such-as-salary-benefits-skills-data-about-employees-enterprise-resource-planning-systems-that-record-details-about-product-components-parts-inventory-and-financial-databases-that-keep-track-of-the-organization-s-money-accounting-and-financial-dealings-a-parallel-database-seeks-to-improve-performance-through-parallelization-for-tasks-such-as-loading-data-building-indexes-and-evaluating-queries-the-major-parallel-dbms-architectures-which-are-induced-by-the-underlying-hardware-architecture-are-shared-memory-architecture-where-multiple-processors-share-the-main-memory-space-as-well-as-other-data-storage-shared-disk-architecture-where-each-processing-unit-typically-consisting-of-multiple-processors-has-its-own-main-memory-but-all-units-share-the-other-storage-shared-nothing-architecture-where-each-processing-unit-has-its-own-main-memory-and-other-storage-probabilistic-databases-employ-fuzzy-logic-to-draw-inferences-from-imprecise-data-real-time-databases-process-transactions-fast-enough-for-the-result-to-come-back-and-be-acted-on-right-away-a-spatial-database-can-store-the-data-with-multidimensional-features-the-queries-on-such-data-include-location-based-queries-like-where-is-the-closest-hotel-in-my-area-a-temporal-database-has-built-in-time-aspects-for-example-a-temporal-data-model-and-a-temporal-version-of-sql-more-specifically-the-temporal-aspects-usually-include-valid-time-and-transaction-time-a-terminology-oriented-database-builds-upon-an-object-oriented-database-often-customized-for-a-specific-field-an-unstructured-data-database-is-intended-to-store-in-a-manageable-and-protected-way-diverse-objects-that-do-not-fit-naturally-and-conveniently-in-common-databases-it-may-include-email-messages-documents-journals-multimedia-objects-etc-the-name-may-be-misleading-since-some-objects-can-be-highly-structured-however-the-entire-possible-object-collection-does-not-fit-into-a-predefined-structured-framework-most-established-dbmss-now-support-unstructured-data-in-various-ways-and-new-dedicated-dbmss-are-emerging-database-management-system-connolly-and-begg-define-database-management-system-dbms-as-a-software-system-that-enables-users-to-define-create-maintain-and-control-access-to-the-database-24-examples-of-dbms-s-include-mysql-postgresql-microsoft-sql-server-oracle-database-and-microsoft-access-the-dbms-acronym-is-sometimes-extended-to-indicate-the-underlying-database-model-with-rdbms-for-the-relational-oodbms-for-the-object-oriented-and-ordbms-for-the-object-relational-model-other-extensions-can-indicate-some-other-characteristics-such-as-ddbms-for-a-distributed-database-management-systems-the-functionality-provided-by-a-dbms-can-vary-enormously-the-core-functionality-is-the-storage-retrieval-and-update-of-data-codd-proposed-the-following-functions-and-services-a-fully-fledged-general-purpose-dbms-should-provide-25-data-storage-retrieval-and-update-user-accessible-catalog-or-data-dictionary-describing-the-metadata-support-for-transactions-and-concurrency-facilities-for-recovering-the-database-should-it-become-damaged-support-for-authorization-of-access-and-update-of-data-access-support-from-remote-locations-enforcing-constraints-to-ensure-data-in-the-database-abides-by-certain-rules-it-is-also-generally-to-be-expected-the-dbms-will-provide-a-set-of-utilities-for-such-purposes-as-may-be-necessary-to-administer-the-database-effectively-including-import-export-monitoring-defragmentation-and-analysis-utilities-26-the-core-part-of-the-dbms-interacting-between-the-database-and-the-application-interface-sometimes-referred-to-as-the-database-engine-often-dbmss-will-have-configuration-parameters-that-can-be-statically-and-dynamically-tuned-for-example-the-maximum-amount-of-main-memory-on-a-server-the-database-can-use-the-trend-is-to-minimize-the-amount-of-manual-configuration-and-for-cases-such-as-embedded-databases-the-need-to-target-zero-administration-is-paramount-the-large-major-enterprise-dbmss-have-tended-to-increase-in-size-and-functionality-and-have-involved-up-to-thousands-of-human-years-of-development-effort-throughout-their-lifetime-a-early-multi-user-dbms-typically-only-allowed-for-the-application-to-reside-on-the-same-computer-with-access-via-terminals-or-terminal-emulation-software-the-client-server-architecture-was-a-development-where-the-application-resided-on-a-client-desktop-and-the-database-on-a-server-allowing-the-processing-to-be-distributed-this-evolved-into-a-multitier-architecture-incorporating-application-servers-and-web-servers-with-the-end-user-interface-via-a-web-browser-with-the-database-only-directly-connected-to-the-adjacent-tier-27-a-general-purpose-dbms-will-provide-public-application-programming-interfaces-api-and-optionally-a-processor-for-database-languages-such-as-sql-to-allow-applications-to-be-written-to-interact-with-and-manipulate-the-database-a-special-purpose-dbms-may-use-a-private-api-and-be-specifically-customized-and-linked-to-a-single-application-for-example-an-email-system-performs-many-of-the-functions-of-a-general-purpose-dbms-such-as-message-insertion-message-deletion-attachment-handling-blocklist-lookup-associating-messages-an-email-address-and-so-forth-however-these-functions-are-limited-to-what-is-required-to-handle-email-application-main-article-database-application-external-interaction-with-the-database-will-be-via-an-application-program-that-interfaces-with-the-dbms-28-this-can-range-from-a-database-tool-that-allows-users-to-execute-sql-queries-textually-or-graphically-to-a-website-that-happens-to-use-a-database-to-store-and-search-information-application-program-interface-a-programmer-will-code-interactions-to-the-database-sometimes-referred-to-as-a-datasource-via-an-application-program-interface-api-or-via-a-database-language-the-particular-api-or-language-chosen-will-need-to-be-supported-by-dbms-possibly-indirectly-via-a-preprocessor-or-a-bridging-api-some-api-s-aim-to-be-database-independent-odbc-being-a-commonly-known-example-other-common-api-s-include-jdbc-and-ado-net-database-languages-database-languages-are-special-purpose-languages-which-allow-one-or-more-of-the-following-tasks-sometimes-distinguished-as-sublanguages-data-control-language-dcl-controls-access-to-data-data-definition-language-ddl-defines-data-types-such-as-creating-altering-or-dropping-tables-and-the-relationships-among-them-data-manipulation-language-dml-performs-tasks-such-as-inserting-updating-or-deleting-data-occurrences-data-query-language-dql-allows-searching-for-information-and-computing-derived-information-database-languages-are-specific-to-a-particular-data-model-notable-examples-include-sql-combines-the-roles-of-data-definition-data-manipulation-and-query-in-a-single-language-it-was-one-of-the-first-commercial-languages-for-the-relational-model-although-it-departs-in-some-respects-from-the-relational-model-as-described-by-codd-for-example-the-rows-and-columns-of-a-table-can-be-ordered-sql-became-a-standard-of-the-american-national-standards-institute-ansi-in-1986-and-of-the-international-organization-for-standardization-iso-in-1987-the-standards-have-been-regularly-enhanced-since-and-are-supported-with-varying-degrees-of-conformance-by-all-mainstream-commercial-relational-dbmss-29-30-oql-is-an-object-model-language-standard-from-the-object-data-management-group-it-has-influenced-the-design-of-some-of-the-newer-query-languages-like-jdoql-and-ejb-ql-xquery-is-a-standard-xml-query-language-implemented-by-xml-database-systems-such-as-marklogic-and-exist-by-relational-databases-with-xml-capability-such-as-oracle-and-db2-and-also-by-in-memory-xml-processors-such-as-saxon-sql-xml-combines-xquery-with-sql-31-a-database-language-may-also-incorporate-features-like-dbms-specific-configuration-and-storage-engine-management-computations-to-modify-query-results-like-counting-summing-averaging-sorting-grouping-and-cross-referencing-constraint-enforcement-e-g-in-an-automotive-database-only-allowing-one-engine-type-per-car-application-programming-interface-version-of-the-query-language-for-programmer-convenience-storage-main-articles-computer-data-storage-and-database-engine-database-storage-is-the-container-of-the-physical-materialization-of-a-database-it-comprises-the-internal-physical-level-in-the-database-architecture-it-also-contains-all-the-information-needed-e-g-metadata-data-about-the-data-and-internal-data-structures-to-reconstruct-the-conceptual-level-and-external-level-from-the-internal-level-when-needed-databases-as-digital-objects-contain-three-layers-of-information-which-must-be-stored-the-data-the-structure-and-the-semantics-proper-storage-of-all-three-layers-is-needed-for-future-preservation-and-longevity-of-the-database-32-putting-data-into-permanent-storage-is-generally-the-responsibility-of-the-database-engine-a-k-a-storage-engine-though-typically-accessed-by-a-dbms-through-the-underlying-operating-system-and-often-using-the-operating-systems-file-systems-as-intermediates-for-storage-layout-storage-properties-and-configuration-settings-are-extremely-important-for-the-efficient-operation-of-the-dbms-and-thus-are-closely-maintained-by-database-administrators-a-dbms-while-in-operation-always-has-its-database-residing-in-several-types-of-storage-e-g-memory-and-external-storage-the-database-data-and-the-additional-needed-information-possibly-in-very-large-amounts-are-coded-into-bits-data-typically-reside-in-the-storage-in-structures-that-look-completely-different-from-the-way-the-data-look-at-the-conceptual-and-external-levels-but-in-ways-that-attempt-to-optimize-the-best-possible-these-levels-reconstruction-when-needed-by-users-and-programs-as-well-as-for-computing-additional-types-of-needed-information-from-the-data-e-g-when-querying-the-database-some-dbmss-support-specifying-which-character-encoding-was-used-to-store-data-so-multiple-encodings-can-be-used-in-the-same-database-various-low-level-database-storage-structures-are-used-by-the-storage-engine-to-serialize-the-data-model-so-it-can-be-written-to-the-medium-of-choice-techniques-such-as-indexing-may-be-used-to-improve-performance-conventional-storage-is-row-oriented-but-there-are-also-column-oriented-and-correlation-databases-materialized-views-main-article-materialized-view-often-storage-redundancy-is-employed-to-increase-performance-a-common-example-is-storing-materialized-views-which-consist-of-frequently-needed-external-views-or-query-results-storing-such-views-saves-the-expensive-computing-them-each-time-they-are-needed-the-downsides-of-materialized-views-are-the-overhead-incurred-when-updating-them-to-keep-them-synchronized-with-their-original-updated-database-data-and-the-cost-of-storage-redundancy-replication-see-also-replication-computing-ss-database-replication-occasionally-a-database-employs-storage-redundancy-by-database-objects-replication-with-one-or-more-copies-to-increase-data-availability-both-to-improve-performance-of-simultaneous-multiple-end-user-accesses-to-the-same-database-object-and-to-provide-resiliency-in-a-case-of-partial-failure-of-a-distributed-database-updates-of-a-replicated-object-need-to-be-synchronized-across-the-object-copies-in-many-cases-the-entire-database-is-replicated-virtualization-with-data-virtualization-the-data-used-remains-in-its-original-locations-and-real-time-access-is-established-to-allow-analytics-across-multiple-sources-this-can-aid-in-resolving-some-technical-difficulties-such-as-compatibility-problems-when-combining-data-from-various-platforms-lowering-the-risk-of-error-caused-by-faulty-data-and-guaranteeing-that-the-newest-data-is-used-furthermore-avoiding-the-creation-of-a-new-database-containing-personal-information-can-make-it-easier-to-comply-with-privacy-regulations-however-with-data-virtualization-the-connection-to-all-necessary-data-sources-must-be-operational-as-there-is-no-local-copy-of-the-data-which-is-one-of-the-main-drawbacks-of-the-approach-33-security-this-article-appears-to-contradict-the-article-database-security-please-see-discussion-on-the-linked-talk-page-march-2013-learn-how-and-when-to-remove-this-template-message-main-article-database-security-database-security-deals-with-all-various-aspects-of-protecting-the-database-content-its-owners-and-its-users-it-ranges-from-protection-from-intentional-unauthorized-database-uses-to-unintentional-database-accesses-by-unauthorized-entities-e-g-a-person-or-a-computer-program-database-access-control-deals-with-controlling-who-a-person-or-a-certain-computer-program-are-allowed-to-access-what-information-in-the-database-the-information-may-comprise-specific-database-objects-e-g-record-types-specific-records-data-structures-certain-computations-over-certain-objects-e-g-query-types-or-specific-queries-or-using-specific-access-paths-to-the-former-e-g-using-specific-indexes-or-other-data-structures-to-access-information-database-access-controls-are-set-by-special-authorized-by-the-database-owner-personnel-that-uses-dedicated-protected-security-dbms-interfaces-this-may-be-managed-directly-on-an-individual-basis-or-by-the-assignment-of-individuals-and-privileges-to-groups-or-in-the-most-elaborate-models-through-the-assignment-of-individuals-and-groups-to-roles-which-are-then-granted-entitlements-data-security-prevents-unauthorized-users-from-viewing-or-updating-the-database-using-passwords-users-are-allowed-access-to-the-entire-database-or-subsets-of-it-called-subschemas-for-example-an-employee-database-can-contain-all-the-data-about-an-individual-employee-but-one-group-of-users-may-be-authorized-to-view-only-payroll-data-while-others-are-allowed-access-to-only-work-history-and-medical-data-if-the-dbms-provides-a-way-to-interactively-enter-and-update-the-database-as-well-as-interrogate-it-this-capability-allows-for-managing-personal-databases-data-security-in-general-deals-with-protecting-specific-chunks-of-data-both-physically-i-e-from-corruption-or-destruction-or-removal-e-g-see-physical-security-or-the-interpretation-of-them-or-parts-of-them-to-meaningful-information-e-g-by-looking-at-the-strings-of-bits-that-they-comprise-concluding-specific-valid-credit-card-numbers-e-g-see-data-encryption-change-and-access-logging-records-who-accessed-which-attributes-what-was-changed-and-when-it-was-changed-logging-services-allow-for-a-forensic-database-audit-later-by-keeping-a-record-of-access-occurrences-and-changes-sometimes-application-level-code-is-used-to-record-changes-rather-than-leaving-this-in-the-database-monitoring-can-be-set-up-to-attempt-to-detect-security-breaches-therefore-organizations-must-take-database-security-seriously-because-of-the-many-benefits-it-provides-organizations-will-be-safeguarded-from-security-breaches-and-hacking-activities-like-firewall-intrusion-virus-spread-and-ransom-ware-this-helps-in-protecting-the-companys-essential-information-which-cannot-be-shared-with-outsiders-at-any-cause-34-transactions-and-concurrency-further-information-concurrency-control-database-transactions-can-be-used-to-introduce-some-level-of-fault-tolerance-and-data-integrity-after-recovery-from-a-crash-a-database-transaction-is-a-unit-of-work-typically-encapsulating-a-number-of-operations-over-a-database-e-g-reading-a-database-object-writing-acquiring-or-releasing-a-lock-etc-an-abstraction-supported-in-database-and-also-other-systems-each-transaction-has-well-defined-boundaries-in-terms-of-which-program-code-executions-are-included-in-that-transaction-determined-by-the-transaction-s-programmer-via-special-transaction-commands-the-acronym-acid-describes-some-ideal-properties-of-a-database-transaction-atomicity-consistency-isolation-and-durability-migration-see-also-data-migration-ss-database-migration-a-database-built-with-one-dbms-is-not-portable-to-another-dbms-i-e-the-other-dbms-cannot-run-it-however-in-some-situations-it-is-desirable-to-migrate-a-database-from-one-dbms-to-another-the-reasons-are-primarily-economical-different-dbmss-may-have-different-total-costs-of-ownership-or-tcos-functional-and-operational-different-dbmss-may-have-different-capabilities-the-migration-involves-the-database-s-transformation-from-one-dbms-type-to-another-the-transformation-should-maintain-if-possible-the-database-related-application-i-e-all-related-application-programs-intact-thus-the-database-s-conceptual-and-external-architectural-levels-should-be-maintained-in-the-transformation-it-may-be-desired-that-also-some-aspects-of-the-architecture-internal-level-are-maintained-a-complex-or-large-database-migration-may-be-a-complicated-and-costly-one-time-project-by-itself-which-should-be-factored-into-the-decision-to-migrate-this-is-in-spite-of-the-fact-that-tools-may-exist-to-help-migration-between-specific-dbmss-typically-a-dbms-vendor-provides-tools-to-help-import-databases-from-other-popular-dbmss-building-maintaining-and-tuning-main-article-database-tuning-after-designing-a-database-for-an-application-the-next-stage-is-building-the-database-typically-an-appropriate-general-purpose-dbms-can-be-selected-to-be-used-for-this-purpose-a-dbms-provides-the-needed-user-interfaces-to-be-used-by-database-administrators-to-define-the-needed-application-s-data-structures-within-the-dbms-s-respective-data-model-other-user-interfaces-are-used-to-select-needed-dbms-parameters-like-security-related-storage-allocation-parameters-etc-when-the-database-is-ready-all-its-data-structures-and-other-needed-components-are-defined-it-is-typically-populated-with-initial-application-s-data-database-initialization-which-is-typically-a-distinct-project-in-many-cases-using-specialized-dbms-interfaces-that-support-bulk-insertion-before-making-it-operational-in-some-cases-the-database-becomes-operational-while-empty-of-application-data-and-data-are-accumulated-during-its-operation-after-the-database-is-created-initialized-and-populated-it-needs-to-be-maintained-various-database-parameters-may-need-changing-and-the-database-may-need-to-be-tuned-tuning-for-better-performance-application-s-data-structures-may-be-changed-or-added-new-related-application-programs-may-be-written-to-add-to-the-application-s-functionality-etc-backup-and-restore-main-article-backup-sometimes-it-is-desired-to-bring-a-database-back-to-a-previous-state-for-many-reasons-e-g-cases-when-the-database-is-found-corrupted-due-to-a-software-error-or-if-it-has-been-updated-with-erroneous-data-to-achieve-this-a-backup-operation-is-done-occasionally-or-continuously-where-each-desired-database-state-i-e-the-values-of-its-data-and-their-embedding-in-database-s-data-structures-is-kept-within-dedicated-backup-files-many-techniques-exist-to-do-this-effectively-when-it-is-decided-by-a-database-administrator-to-bring-the-database-back-to-this-state-e-g-by-specifying-this-state-by-a-desired-point-in-time-when-the-database-was-in-this-state-these-files-are-used-to-restore-that-state-static-analysis-static-analysis-techniques-for-software-verification-can-be-applied-also-in-the-scenario-of-query-languages-in-particular-the-abstract-interpretation-framework-has-been-extended-to-the-field-of-query-languages-for-relational-databases-as-a-way-to-support-sound-approximation-techniques-35-the-semantics-of-query-languages-can-be-tuned-according-to-suitable-abstractions-of-the-concrete-domain-of-data-the-abstraction-of-relational-database-systems-has-many-interesting-applications-in-particular-for-security-purposes-such-as-fine-grained-access-control-watermarking-etc-miscellaneous-features-other-dbms-features-might-include-database-logs-this-helps-in-keeping-a-history-of-the-executed-functions-graphics-component-for-producing-graphs-and-charts-especially-in-a-data-warehouse-system-query-optimizer-performs-query-optimization-on-every-query-to-choose-an-efficient-query-plan-a-partial-order-tree-of-operations-to-be-executed-to-compute-the-query-result-may-be-specific-to-a-particular-storage-engine-tools-or-hooks-for-database-design-application-programming-application-program-maintenance-database-performance-analysis-and-monitoring-database-configuration-monitoring-dbms-hardware-configuration-a-dbms-and-related-database-may-span-computers-networks-and-storage-units-and-related-database-mapping-especially-for-a-distributed-dbms-storage-allocation-and-database-layout-monitoring-storage-migration-etc-increasingly-there-are-calls-for-a-single-system-that-incorporates-all-of-these-core-functionalities-into-the-same-build-test-and-deployment-framework-for-database-management-and-source-control-borrowing-from-other-developments-in-the-software-industry-some-market-such-offerings-as-devops-for-database-36-design-and-modeling-main-article-database-design-the-first-task-of-a-database-designer-is-to-produce-a-conceptual-data-model-that-reflects-the-structure-of-the-information-to-be-held-in-the-database-a-common-approach-to-this-is-to-develop-an-entity-relationship-model-often-with-the-aid-of-drawing-tools-another-popular-approach-is-the-unified-modeling-language-a-successful-data-model-will-accurately-reflect-the-possible-state-of-the-external-world-being-modeled-for-example-if-people-can-have-more-than-one-phone-number-it-will-allow-this-information-to-be-captured-designing-a-good-conceptual-data-model-requires-a-good-understanding-of-the-application-domain-it-typically-involves-asking-deep-questions-about-the-things-of-interest-to-an-organization-like-can-a-customer-also-be-a-supplier-or-if-a-product-is-sold-with-two-different-forms-of-packaging-are-those-the-same-product-or-different-products-or-if-a-plane-flies-from-new-york-to-dubai-via-frankfurt-is-that-one-flight-or-two-or-maybe-even-three-the-answers-to-these-questions-establish-definitions-of-the-terminology-used-for-entities-customers-products-flights-flight-segments-and-their-relationships-and-attributes-producing-the-conceptual-data-model-sometimes-involves-input-from-business-processes-or-the-analysis-of-workflow-in-the-organization-this-can-help-to-establish-what-information-is-needed-in-the-database-and-what-can-be-left-out-for-example-it-can-help-when-deciding-whether-the-database-needs-to-hold-historic-data-as-well-as-current-data-having-produced-a-conceptual-data-model-that-users-are-happy-with-the-next-stage-is-to-translate-this-into-a-schema-that-implements-the-relevant-data-structures-within-the-database-this-process-is-often-called-logical-database-design-and-the-output-is-a-logical-data-model-expressed-in-the-form-of-a-schema-whereas-the-conceptual-data-model-is-in-theory-at-least-independent-of-the-choice-of-database-technology-the-logical-data-model-will-be-expressed-in-terms-of-a-particular-database-model-supported-by-the-chosen-dbms-the-terms-data-model-and-database-model-are-often-used-interchangeably-but-in-this-article-we-use-data-model-for-the-design-of-a-specific-database-and-database-model-for-the-modeling-notation-used-to-express-that-design-the-most-popular-database-model-for-general-purpose-databases-is-the-relational-model-or-more-precisely-the-relational-model-as-represented-by-the-sql-language-the-process-of-creating-a-logical-database-design-using-this-model-uses-a-methodical-approach-known-as-normalization-the-goal-of-normalization-is-to-ensure-that-each-elementary-fact-is-only-recorded-in-one-place-so-that-insertions-updates-and-deletions-automatically-maintain-consistency-the-final-stage-of-database-design-is-to-make-the-decisions-that-affect-performance-scalability-recovery-security-and-the-like-which-depend-on-the-particular-dbms-this-is-often-called-physical-database-design-and-the-output-is-the-physical-data-model-a-key-goal-during-this-stage-is-data-independence-meaning-that-the-decisions-made-for-performance-optimization-purposes-should-be-invisible-to-end-users-and-applications-there-are-two-types-of-data-independence-physical-data-independence-and-logical-data-independence-physical-design-is-driven-mainly-by-performance-requirements-and-requires-a-good-knowledge-of-the-expected-workload-and-access-patterns-and-a-deep-understanding-of-the-features-offered-by-the-chosen-dbms-another-aspect-of-physical-database-design-is-security-it-involves-both-defining-access-control-to-database-objects-as-well-as-defining-security-levels-and-methods-for-the-data-itself-models-main-article-database-model-collage-of-five-types-of-database-models-a-database-model-is-a-type-of-data-model-that-determines-the-logical-structure-of-a-database-and-fundamentally-determines-in-which-manner-data-can-be-stored-organized-and-manipulated-the-most-popular-example-of-a-database-model-is-the-relational-model-or-the-sql-approximation-of-relational-which-uses-a-table-based-format-common-logical-data-models-for-databases-include-navigational-databases-hierarchical-database-model-network-model-graph-database-relational-model-entity-relationship-model-enhanced-entity-relationship-model-object-model-document-model-entity-attribute-value-model-star-schema-an-object-relational-database-combines-the-two-related-structures-physical-data-models-include-inverted-index-flat-file-other-models-include-multidimensional-model-array-model-multivalue-model-specialized-models-are-optimized-for-particular-types-of-data-xml-database-semantic-model-content-store-event-store-time-series-model-external-conceptual-and-internal-views-traditional-view-of-data-37-a-database-management-system-provides-three-views-of-the-database-data-the-external-level-defines-how-each-group-of-end-users-sees-the-organization-of-data-in-the-database-a-single-database-can-have-any-number-of-views-at-the-external-level-the-conceptual-level-or-logical-level-unifies-the-various-external-views-into-a-compatible-global-view-38-it-provides-the-synthesis-of-all-the-external-views-it-is-out-of-the-scope-of-the-various-database-end-users-and-is-rather-of-interest-to-database-application-developers-and-database-administrators-the-internal-level-or-physical-level-is-the-internal-organization-of-data-inside-a-dbms-it-is-concerned-with-cost-performance-scalability-and-other-operational-matters-it-deals-with-storage-layout-of-the-data-using-storage-structures-such-as-indexes-to-enhance-performance-occasionally-it-stores-data-of-individual-views-materialized-views-computed-from-generic-data-if-performance-justification-exists-for-such-redundancy-it-balances-all-the-external-views-performance-requirements-possibly-conflicting-in-an-attempt-to-optimize-overall-performance-across-all-activities-while-there-is-typically-only-one-conceptual-and-internal-view-of-the-data-there-can-be-any-number-of-different-external-views-this-allows-users-to-see-database-information-in-a-more-business-related-way-rather-than-from-a-technical-processing-viewpoint-for-example-a-financial-department-of-a-company-needs-the-payment-details-of-all-employees-as-part-of-the-company-s-expenses-but-does-not-need-details-about-employees-that-are-in-the-interest-of-the-human-resources-department-thus-different-departments-need-different-views-of-the-company-s-database-the-three-level-database-architecture-relates-to-the-concept-of-data-independence-which-was-one-of-the-major-initial-driving-forces-of-the-relational-model-38-the-idea-is-that-changes-made-at-a-certain-level-do-not-affect-the-view-at-a-higher-level-for-example-changes-in-the-internal-level-do-not-affect-application-programs-written-using-conceptual-level-interfaces-which-reduces-the-impact-of-making-physical-changes-to-improve-performance-the-conceptual-view-provides-a-level-of-indirection-between-internal-and-external-on-the-one-hand-it-provides-a-common-view-of-the-database-independent-of-different-external-view-structures-and-on-the-other-hand-it-abstracts-away-details-of-how-the-data-are-stored-or-managed-internal-level-in-principle-every-level-and-even-every-external-view-can-be-presented-by-a-different-data-model-in-practice-usually-a-given-dbms-uses-the-same-data-model-for-both-the-external-and-the-conceptual-levels-e-g-relational-model-the-internal-level-which-is-hidden-inside-the-dbms-and-depends-on-its-implementation-requires-a-different-level-of-detail-and-uses-its-own-types-of-data-structure-types-research-database-technology-has-been-an-active-research-topic-since-the-1960s-both-in-academia-and-in-the-research-and-development-groups-of-companies-for-example-ibm-research-research-activity-includes-theory-and-development-of-prototypes-notable-research-topics-have-included-models-the-atomic-transaction-concept-related-concurrency-control-techniques-query-languages-and-query-optimization-methods-raid-and-more-the-database-research-area-has-several-dedicated-academic-journals-for-example-acm-transactions-on-database-systems-tods-data-and-knowledge-engineering-dke-and-annual-conferences-e-g-acm-sigmod-acm-pods-vldb-ieee-icde-see-also-for-a-topical-guide-see-outline-of-databases-comparison-of-database-tools-comparison-of-object-database-management-systems-comparison-of-object-relational-database-management-systems-comparison-of-relational-database-management-systems-data-hierarchy-data-bank-data-store-database-theory-database-testing-database-centric-architecture-flat-file-database-inp-database-journal-of-database-management-question-focused-dataset-notes-this-article-quotes-a-development-time-of-5-years-involving-750-people-for-db2-release-9-alone-chong-et-al-2007-references-ullman-widom-1997-p-1-update-definition-of-update-by-merriam-webster-merriam-webster-com-retrieval-definition-of-retrieval-by-merriam-webster-merriam-webster-com-administration-definition-of-administration-by-merriam-webster-merriam-webster-com-tsitchizris-lochovsky-1982-beynon-davies-2003-nelson-nelson-2001-bachman-1973-topdb-top-database-index-pypl-github-io-database-n-oed-online-oxford-university-press-june-2013-retrieved-july-12-2013-subscription-required-ibm-corporation-october-2013-ibm-information-management-system-ims-13-transaction-and-database-servers-delivers-high-performance-and-low-total-cost-of-ownership-retrieved-feb-20-2014-codd-1970-hershey-easthope-1972-north-2010-childs-1968a-childs-1968b-m-a-kahn-d-l-rumelhart-b-l-bronson-october-1977-micro-information-management-system-version-5-0-reference-manual-institute-of-labor-and-industrial-relations-ilir-university-of-michigan-and-wayne-state-university-oracle-30th-anniversary-timeline-pdf-retrieved-23-august-2017-interview-with-wayne-ratliff-the-foxpro-history-retrieved-on-2013-07-12-development-of-an-object-oriented-dbms-portland-oregon-united-states-pages-472-482-1986-isbn-0-89791-204-7-graves-steve-cots-databases-for-embedded-systems-archived-2007-11-14-at-the-wayback-machine-embedded-computing-design-magazine-january-2007-retrieved-on-august-13-2008-argumentation-in-artificial-intelligence-by-iyad-rahwan-guillermo-r-simari-owl-dl-semantics-retrieved-10-december-2010-connolly-begg-2014-p-64-connolly-begg-2014-pp-97-102-connolly-begg-2014-p-102-connolly-begg-2014-pp-106-113-connolly-begg-2014-p-65-chapple-2005-structured-query-language-sql-international-business-machines-october-27-2006-retrieved-2007-06-10-wagner-2010-ramalho-j-c-faria-l-helder-s-coutada-m-31-december-2013-database-preservation-toolkit-a-flexible-tool-to-normalize-and-give-access-to-databases-biblioteca-nacional-de-portugal-bnp-university-of-minho-paiho-s-tuominen-p-rokman-j-ylikerala-m-pajula-j-siikavirta-h-opportunities-of-collected-city-data-for-smart-cities-iet-smart-cities-09-november-2022-david-y-chan-victoria-chiu-miklos-a-vasarhelyi-2018-continuous-auditing-theory-and-application-1st-ed-bingley-uk-isbn-978-1-78743-413-4-oclc-1029759767-halder-cortesi-2011-ben-linders-january-28-2016-how-database-administration-fits-into-devops-retrieved-april-15-2017-itl-nist-gov-1993-integration-definition-for-information-modeling-idefix-archived-2013-12-03-at-the-wayback-machine-21-december-1993-a-b-date-2003-pp-31-32-sources-bachman-charles-w-1973-the-programmer-as-navigator-communications-of-the-acm-16-11-653-658-doi-10-1145-355611-362534-beynon-davies-paul-2003-database-systems-3rd-ed-palgrave-macmillan-isbn-978-1403916013-chapple-mike-2005-sql-fundamentals-databases-about-com-archived-from-the-original-on-22-february-2009-retrieved-28-january-2009-childs-david-l-1968a-description-of-a-set-theoretic-data-structure-pdf-technical-report-concomp-research-in-conversational-use-of-computers-project-university-of-michigan-technical-report-3-childs-david-l-1968b-feasibility-of-a-set-theoretic-data-structure-a-general-structure-based-on-a-reconstituted-definition-pdf-technical-report-concomp-research-in-conversational-use-of-computers-project-university-of-michigan-technical-report-6-chong-raul-f-wang-xiaomei-dang-michael-snow-dwaine-r-2007-introduction-to-db2-understanding-db2-learning-visually-with-examples-2nd-ed-isbn-978-0131580183-retrieved-17-march-2013-codd-edgar-f-1970-a-relational-model-of-data-for-large-shared-data-banks-pdf-communications-of-the-acm-13-6-377-387-doi-10-1145-362384-362685-s2cid-207549016-connolly-thomas-m-begg-carolyn-e-2014-database-systems-a-practical-approach-to-design-implementation-and-management-6th-ed-pearson-isbn-978-1292061184-date-c-j-2003-an-introduction-to-database-systems-8th-ed-pearson-isbn-978-0321197849-halder-raju-cortesi-agostino-2011-abstract-interpretation-of-database-query-languages-pdf-computer-languages-systems-structures-38-2-123-157-doi-10-1016-j-cl-2011-10-004-issn-1477-8424-hershey-william-easthope-carol-1972-a-set-theoretic-data-structure-and-retrieval-language-spring-joint-computer-conference-may-1972-acm-sigir-forum-vol-7-no-4-pp-45-55-doi-10-1145-1095495-1095500-nelson-anne-fulcher-nelson-william-harris-morehead-2001-building-electronic-commerce-with-web-database-constructions-prentice-hall-isbn-978-0201741308-north-ken-10-march-2010-sets-data-models-and-data-independence-dr-dobb-s-archived-from-the-original-on-24-october-2010-tsitchizris-dionysios-c-lochovsky-fred-h-1982-data-models-prentice-hall-isbn-978-0131964280-ullman-jeffrey-widom-jennifer-1997-a-first-course-in-database-systems-prentice-hall-isbn-978-0138613372-wagner-michael-2010-sql-xml-2006-evaluierung-der-standardkonformitat-ausgewahlter-datenbanksysteme-diplomica-verlag-isbn-978-3836696098-further-reading-ling-liu-and-tamer-m-ozsu-eds-2009-encyclopedia-of-database-systems-4100-p-60-illus-isbn-978-0-387-49616-0-gray-j-and-reuter-a-transaction-processing-concepts-and-techniques-1st-edition-morgan-kaufmann-publishers-1992-kroenke-david-m-and-david-j-auer-database-concepts-3rd-ed-new-york-prentice-2007-raghu-ramakrishnan-and-johannes-gehrke-database-management-systems-abraham-silberschatz-henry-f-korth-s-sudarshan-database-system-concepts-lightstone-s-teorey-t-nadeau-t-2007-physical-database-design-the-database-professional-s-guide-to-exploiting-indexes-views-storage-and-more-morgan-kaufmann-press-isbn-978-0-12-369389-1-teorey-t-lightstone-s-and-nadeau-t-database-modeling-design-logical-design-4th-edition-morgan-kaufmann-press-2005-isbn-0-12-685352-5-external-links-database-at-wikipedia-s-sister-projects-definitions-from-wiktionarymedia-from-commonsnews-from-wikinewsquotations-from-wikiquotetexts-from-wikisourcetextbooks-from-wikibooksresources-from-wikiversity-db-file-extension-information-about-files-with-the-db-extension-links-to-related-articles-vtecomputer-sciencenote-this-template-roughly-follows-the-2012-acm-computing-classification-system-hardware-printed-circuit-board-peripheral-integrated-circuit-very-large-scale-integration-systems-on-chip-socs-energy-consumption-green-computing-electronic-design-automation-hardware-acceleration-computer-systems-organization-computer-architecture-embedded-system-real-time-computing-dependability-networks-network-architecture-network-protocol-network-components-network-scheduler-network-performance-evaluation-network-service-software-organization-interpreter-middleware-virtual-machine-operating-system-software-quality-software-notations-and-tools-programming-paradigm-programming-language-compiler-domain-specific-language-modeling-language-software-framework-integrated-development-environment-software-configuration-management-software-library-software-repository-software-development-control-variable-software-development-process-requirements-analysis-software-design-software-construction-software-deployment-software-engineering-software-maintenance-programming-team-open-source-model-theory-of-computation-model-of-computation-formal-language-automata-theory-computability-theory-computational-complexity-theory-logic-semantics-algorithms-algorithm-design-analysis-of-algorithms-algorithmic-efficiency-randomized-algorithm-computational-geometry-mathematics-of-computing-discrete-mathematics-probability-statistics-mathematical-software-information-theory-mathematical-analysis-numerical-analysis-theoretical-computer-science-information-systems-database-management-system-information-storage-systems-enterprise-information-system-social-information-systems-geographic-information-system-decision-support-system-process-control-system-multimedia-information-system-data-mining-digital-library-computing-platform-digital-marketing-world-wide-web-information-retrieval-security-cryptography-formal-methods-security-services-intrusion-detection-system-hardware-security-network-security-information-security-application-security-human-computer-interaction-interaction-design-social-computing-ubiquitous-computing-visualization-accessibility-concurrency-concurrent-computing-parallel-computing-distributed-computing-multithreading-multiprocessing-artificial-intelligence-natural-language-processing-knowledge-representation-and-reasoning-computer-vision-automated-planning-and-scheduling-search-methodology-control-method-philosophy-of-artificial-intelligence-distributed-artificial-intelligence-machine-learning-supervised-learning-unsupervised-learning-reinforcement-learning-multi-task-learning-cross-validation-graphics-animation-rendering-image-manipulation-graphics-processing-unit-mixed-reality-virtual-reality-image-compression-solid-modeling-applied-computing-e-commerce-enterprise-software-computational-mathematics-computational-physics-computational-chemistry-computational-biology-computational-social-science-computational-engineering-computational-healthcare-digital-art-electronic-publishing-cyberwarfare-electronic-voting-video-games-word-processing-operations-research-educational-technology-document-management-category-outline-wikiproject-commons-vtedatabasemain-requirements-theory-models-database-management-system-machine-server-application-connection-datasource-dsn-administrator-lock-types-tools-languages-data-definition-data-manipulation-query-information-retrieval-security-activity-monitoring-audit-forensics-negative-database-design-entities-and-relationships-and-enhanced-notation-normalization-schema-refactoring-cardinality-programming-abstraction-layer-object-relational-mapping-management-virtualization-tuning-caching-migration-preservation-integrity-see-also-database-centric-architecture-intelligent-database-two-phase-locking-locks-with-ordered-sharing-load-file-publishing-halloween-problem-log-shipping-category-wikiproject-vtedatabase-management-systemstypes-object-oriented-comparison-relational-list-comparison-key-value-column-oriented-list-document-oriented-wide-column-store-graph-nosql-newsql-in-memory-list-multi-model-comparison-cloud-blockchain-based-database-concepts-database-acid-armstrong-s-axioms-codd-s-12-rules-cap-theorem-crud-null-candidate-key-foreign-key-superkey-surrogate-key-unique-key-objects-relation-table-column-row-view-transaction-transaction-log-trigger-index-stored-procedure-cursor-partition-components-concurrency-control-data-dictionary-jdbc-xqj-odbc-query-language-query-optimizer-query-rewriting-system-query-plan-functions-administration-query-optimization-replication-sharding-related-topics-database-models-database-normalization-database-storage-distributed-database-federated-database-system-referential-integrity-relational-algebra-relational-calculus-relational-model-object-relational-database-transaction-processing-category-outline-wikiproject-vtedata-warehousescreating-a-data-warehouseconcepts-database-dimension-dimensional-modeling-fact-olap-star-schema-snowflake-schema-reverse-star-schema-aggregate-variants-anchor-modeling-column-oriented-dbms-data-vault-modeling-holap-molap-rolap-operational-data-store-elements-data-dictionary-metadata-data-mart-sixth-normal-form-surrogate-key-fact-fact-table-early-arriving-fact-measure-dimension-dimension-table-degenerate-slowly-changing-filling-extract-transform-load-etl-extract-load-transform-elt-extract-transform-load-using-a-data-warehouseconcepts-business-intelligence-dashboard-data-mining-decision-support-system-dss-olap-cube-data-warehouse-automation-languages-data-mining-extensions-dmx-multidimensional-expressions-mdx-xml-for-analysis-xmla-tools-business-intelligence-software-reporting-software-spreadsheet-relatedpeople-bill-inmon-ralph-kimball-products-comparison-of-olap-servers-data-warehousing-products-and-their-producers-vtesemantic-webbackground-databases-hypertext-internet-ontologies-semantics-semantic-networks-world-wide-web-sub-topics-dataspaces-hyperdata-linked-data-rule-based-systems-applications-semantic-analytics-semantic-broker-semantic-computing-semantic-mapper-semantic-matching-semantic-publishing-semantic-reasoner-semantic-search-semantic-service-oriented-architecture-semantic-wiki-related-topics-collective-intelligence-description-logic-folksonomy-geotagging-information-architecture-knowledge-extraction-knowledge-management-knowledge-representation-and-reasoning-library-2-0-digital-library-digital-humanities-metadata-references-topic-map-web-2-0-web-engineering-web-science-trust-standardssyntax-and-supporting-technologies-http-iri-uri-rdf-triples-rdf-xml-json-ld-turtle-trig-notation3-n-triples-trix-no-w3c-standard-rrid-sparql-xml-semantic-html-schemas-ontologies-and-rules-common-logic-owl-rdfs-rule-interchange-format-semantic-web-rule-language-alps-shacl-semantic-annotation-erdf-grddl-microdata-microformats-rdfa-sawsdl-facebook-platform-common-vocabularies-doap-dublin-core-foaf-schema-org-sioc-skos-microformat-vocabularies-hatom-hcalendar-hcard-hproduct-hrecipe-hreview-vtesystems-sciencesystemtypes-anatomical-art-biological-complex-complex-adaptive-conceptual-coupled-human-environment-database-dynamical-ecological-economic-energy-formal-holarchic-information-legal-measurement-metric-multi-agent-nervous-nonlinear-operating-planetary-political-sensory-social-star-writing-concepts-doubling-time-leverage-points-limiting-factor-negative-feedback-positive-feedback-theoreticalfields-chaos-theory-complex-systems-control-theory-cybernetics-earth-system-science-living-systems-sociotechnical-system-systemics-urban-metabolism-world-systems-theory-analysis-biology-dynamics-ecology-engineering-neuroscience-pharmacology-psychology-theory-systems-thinking-scientists-alexander-bogdanov-russell-l-ackoff-william-ross-ashby-ruzena-bajcsy-bela-h-banathy-gregory-bateson-anthony-stafford-beer-richard-e-bellman-ludwig-von-bertalanffy-margaret-boden-kenneth-e-boulding-murray-bowen-kathleen-carley-mary-cartwright-c-west-churchman-manfred-clynes-george-dantzig-edsger-w-dijkstra-fred-emery-heinz-von-foerster-stephanie-forrest-jay-wright-forrester-barbara-grosz-charles-a-s-hall-mike-jackson-lydia-kavraki-james-j-kay-faina-m-kirillova-george-klir-allenna-leonard-edward-norton-lorenz-niklas-luhmann-humberto-maturana-margaret-mead-donella-meadows-mihajlo-d-mesarovic-james-grier-miller-radhika-nagpal-howard-t-odum-talcott-parsons-ilya-prigogine-qian-xuesen-anatol-rapoport-john-seddon-peter-senge-claude-shannon-katia-sycara-eric-trist-francisco-varela-manuela-m-veloso-kevin-warwick-norbert-wiener-jennifer-wilby-anthony-wilden-applications-systems-theory-in-anthropology-systems-theory-in-archaeology-systems-theory-in-political-science-organizations-list-principia-cybernetica-category-portal-commons-authority-control-national-libraries-france-data-ukraine-germany-israel-united-states-japan-czech-republic-other-national-archives-us-retrieved-from-https-en-wikipedia-org-w-index-php-title-database-oldid-1121063903-categories-database-management-systemsdatabaseshidden-categories-pages-containing-links-to-subscription-only-contentwebarchive-template-wayback-linksarticles-with-short-descriptionshort-description-matches-wikidataall-articles-with-unsourced-statementsarticles-with-unsourced-statements-from-january-2020articles-containing-potentially-dated-statements-from-2018all-articles-containing-potentially-dated-statementsarticles-with-unsourced-statements-from-march-2013articles-containing-potentially-dated-statements-from-2014articles-with-unsourced-statements-from-may-2012articles-needing-additional-references-from-march-2013all-articles-needing-additional-referencesarticles-contradicting-other-articlespages-using-sister-project-links-with-wikidata-namespace-mismatchpages-using-sister-project-links-with-wikidata-mismatchpages-using-sister-project-links-with-default-searcharticles-with-bnf-identifiersarticles-with-emu-identifiersarticles-with-gnd-identifiersarticles-with-j9u-identifiersarticles-with-lccn-identifiersarticles-with-ndl-identifiersarticles-with-nkc-identifiersarticles-with-nara-identifiers-navigation-menu-personal-tools-not-logged-intalkcontributionscreate-accountlog-in-namespaces-articletalk-english-views-readview-sourceview-history-more-search-navigation-main-pagecontentscurrent-eventsrandom-articleabout-wikipediacontact-usdonate-contribute-helplearn-to-editcommunity-portalrecent-changesupload-file-tools-what-links-hererelated-changesupload-filespecial-pagespermanent-linkpage-informationcite-this-pagewikidata-item-print-export-download-as-pdfprintable-version-in-other-projects-wikimedia-commonswikiversity-languages-afrikaansamaarenyaal-rby-aragonesasturianuaz-rbaycancatoerkhjhbaanlaaban-lam-gubelaruskaiabelaruskaia-tarashkevitsa-blgarskiboarischbosanskibrezhonegcatalacestinacymraegdanskdeutscheestiellenikaespanolesperantoeuskarafrsyfrancaisfryskgaeilgegalegohangugeohayerenhindiihrvatskiidobahasa-indonesiainterlinguaislenskaitaliano-brytjawak-art-ulikazakshakiswahilikurdikyrgyzchalatinalatviesulietuviulingua-franca-novalombardmagyarmakedonskimlyaallnmsr-bahasa-melayumirandesmongolm-n-maabhaasaanederlandsri-ben-yu-norsk-bokmalnorsk-nynorskoccitanolyk-mariioromooo-zbekcha-uzbekchapnjaabiipstwpolskiportuguesromanarusskiiseelterskshqipsicilianusinhlsimple-englishslovencinaslovenscinakhwrdysrpski-srpskisrpskohrvatski-srpskokhrvatskisuomisvenskatagalogtmillltatarcha-tatarcateluguaithytochikiturkceukrayinskatieng-vietwalonwinaraywu-yu-yue-yu-zhong-wen-edit-links-this-page-was-last-edited-on-10-november-2022-at-08-51-utc-text-is-available-under-the-creative-commons-attribution-sharealike-license-3-0-additional-terms-may-apply-by-using-this-site-you-agree-to-the-terms-of-use-and-privacy-policy-wikipedia-r-is-a-registered-trademark-of-the-wikimedia-foundation-inc-a-non-profit-organization-privacy-policy-about-wikipedia-disclaimers-contact-wikipedia-mobile-view-developers-statistics-cookie-statement